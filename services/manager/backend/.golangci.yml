version: "2"

run:
  timeout: 5m
  issues-exit-code: 1  # 問題検出時にプロセス終了コードを 1 にする
  tests: true          # テストコードもチェック対象

linters:
  enable:
    # Standard: https://golangci-lint.run/usage/linters/#enabled-by-default
    #   unused は staticcheck で賄えるため省略
    - errcheck         # 戻り値のエラー無視を検出
    - govet            # go標準ツール。バグの可能性が高いコードを検出
    - ineffassign      # 無意味な変数代入を検出
    - staticcheck      # 包括的なリンター（バグ、パフォーマンス問題、不適切なライブラリ使用、Goのベストプラクティス違反等を検出）
    # 以下は個別追加
    - bodyclose        # HTTPレスポンスの Body が適切にクローズされていない問題を検出
    - depguard         # 使用可能or禁止ライブラリのルール違反を検出
    - dogsled          # 「_」使用過多を検出
    - dupl             # コード内の重複（duplicate）を検出
    - exhaustive       # switch内の網羅不備を検出
    - gochecknoinits   # init()関数の使用を検出
    - goconst          # 頻出する文字列・数値リテラルを検出
    - gocritic         # 包括的なリンター（バグ、コーディングスタイル違反等を検出）
    - gocyclo          # 循環的複雑度が高いものを検出
    - goprintffuncname # printf系関数の命名規則違反を検出
    - gosec            # セキュリティ脆弱性を検出
    - lll              # 1行あたりの文字数制限違反を検出
    - misspell         # スペルミスを検出
    - mnd              # マジックナンバーを検出
    - nakedret         # 名前付き戻り値使用関数での値なしreturnを検出
    - noctx            # HTTP関連処理でのcontext.Context未使用を検出
    - nolintlint       # 不適切なnolintコメントを検出
    - rowserrcheck     # SQLクエリのrows.Err()チェック漏れを検出
    - unconvert        # 不要な型変換を検出
    - unparam          # 未使用関数パラメータを検出
    - whitespace       # 空白文字の不適切使用を検出
