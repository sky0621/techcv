// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: oauth_states.sql

package mysqlsqlc

import (
	"context"
	"database/sql"
	"time"
)

const createOAuthState = `-- name: CreateOAuthState :exec
INSERT INTO oauth_states (
  state,
  code_verifier,
  nonce,
  redirect_uri,
  expires_at
) VALUES (
  ?,
  ?,
  ?,
  ?,
  ?
)
`

type CreateOAuthStateParams struct {
	State        string         `json:"state"`
	CodeVerifier sql.NullString `json:"code_verifier"`
	Nonce        sql.NullString `json:"nonce"`
	RedirectUri  sql.NullString `json:"redirect_uri"`
	ExpiresAt    time.Time      `json:"expires_at"`
}

func (q *Queries) CreateOAuthState(ctx context.Context, arg CreateOAuthStateParams) error {
	_, err := q.db.ExecContext(ctx, createOAuthState,
		arg.State,
		arg.CodeVerifier,
		arg.Nonce,
		arg.RedirectUri,
		arg.ExpiresAt,
	)
	return err
}

const deleteExpiredOAuthStates = `-- name: DeleteExpiredOAuthStates :exec
DELETE FROM oauth_states
WHERE expires_at <= ?
`

func (q *Queries) DeleteExpiredOAuthStates(ctx context.Context, referenceTime time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteExpiredOAuthStates, referenceTime)
	return err
}

const deleteOAuthState = `-- name: DeleteOAuthState :exec
DELETE FROM oauth_states
WHERE state = ?
`

func (q *Queries) DeleteOAuthState(ctx context.Context, state string) error {
	_, err := q.db.ExecContext(ctx, deleteOAuthState, state)
	return err
}

const getOAuthState = `-- name: GetOAuthState :one
SELECT
  state,
  code_verifier,
  nonce,
  redirect_uri,
  expires_at,
  created_at,
  updated_at
FROM oauth_states
WHERE state = ?
LIMIT 1
`

func (q *Queries) GetOAuthState(ctx context.Context, state string) (OauthState, error) {
	row := q.db.QueryRowContext(ctx, getOAuthState, state)
	var i OauthState
	err := row.Scan(
		&i.State,
		&i.CodeVerifier,
		&i.Nonce,
		&i.RedirectUri,
		&i.ExpiresAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
