// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: public_urls.sql

package mysqlsqlc

import (
	"context"
	"database/sql"
)

const createPublicURL = `-- name: CreatePublicURL :execresult
INSERT INTO public_urls (url_key)
VALUES (?)
`

func (q *Queries) CreatePublicURL(ctx context.Context, urlKey string) (sql.Result, error) {
	return q.db.ExecContext(ctx, createPublicURL, urlKey)
}

const deactivatePublicURL = `-- name: DeactivatePublicURL :exec
UPDATE public_urls
SET is_active = FALSE,
    updated_at = CURRENT_TIMESTAMP(6)
WHERE id = ?
`

func (q *Queries) DeactivatePublicURL(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deactivatePublicURL, id)
	return err
}

const getActivePublicURL = `-- name: GetActivePublicURL :one
SELECT
  id,
  url_key,
  is_active,
  created_at,
  updated_at
FROM public_urls
WHERE is_active = TRUE
ORDER BY updated_at DESC
LIMIT 1
`

func (q *Queries) GetActivePublicURL(ctx context.Context) (PublicUrl, error) {
	row := q.db.QueryRowContext(ctx, getActivePublicURL)
	var i PublicUrl
	err := row.Scan(
		&i.ID,
		&i.UrlKey,
		&i.IsActive,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listPublicURLs = `-- name: ListPublicURLs :many
SELECT
  id,
  url_key,
  is_active,
  created_at,
  updated_at
FROM public_urls
ORDER BY updated_at DESC
`

func (q *Queries) ListPublicURLs(ctx context.Context) ([]PublicUrl, error) {
	rows, err := q.db.QueryContext(ctx, listPublicURLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PublicUrl
	for rows.Next() {
		var i PublicUrl
		if err := rows.Scan(
			&i.ID,
			&i.UrlKey,
			&i.IsActive,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
