// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: users.sql

package mysqlsqlc

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (
  id,
  email,
  password_hash,
  google_id,
  name,
  profile_image_url,
  bio,
  is_active,
  email_verified_at,
  last_login_at,
  created_at,
  updated_at
) VALUES (
  UUID_TO_BIN(?, TRUE),
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?,
  ?
)
`

type CreateUserParams struct {
	ID              string         `json:"id"`
	Email           string         `json:"email"`
	PasswordHash    sql.NullString `json:"password_hash"`
	GoogleID        sql.NullString `json:"google_id"`
	Name            sql.NullString `json:"name"`
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	IsActive        bool           `json:"is_active"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	LastLoginAt     sql.NullTime   `json:"last_login_at"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.PasswordHash,
		arg.GoogleID,
		arg.Name,
		arg.ProfileImageUrl,
		arg.Bio,
		arg.IsActive,
		arg.EmailVerifiedAt,
		arg.LastLoginAt,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
  BIN_TO_UUID(id, TRUE) AS id,
  email,
  password_hash,
  google_id,
  name,
  profile_image_url,
  bio,
  is_active,
  email_verified_at,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE email = ?
LIMIT 1
`

type GetUserByEmailRow struct {
	ID              string         `json:"id"`
	Email           string         `json:"email"`
	PasswordHash    sql.NullString `json:"password_hash"`
	GoogleID        sql.NullString `json:"google_id"`
	Name            sql.NullString `json:"name"`
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	IsActive        bool           `json:"is_active"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	LastLoginAt     sql.NullTime   `json:"last_login_at"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.Name,
		&i.ProfileImageUrl,
		&i.Bio,
		&i.IsActive,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByGoogleID = `-- name: GetUserByGoogleID :one
SELECT
  BIN_TO_UUID(id, TRUE) AS id,
  email,
  password_hash,
  google_id,
  name,
  profile_image_url,
  bio,
  is_active,
  email_verified_at,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE google_id = ?
LIMIT 1
`

type GetUserByGoogleIDRow struct {
	ID              string         `json:"id"`
	Email           string         `json:"email"`
	PasswordHash    sql.NullString `json:"password_hash"`
	GoogleID        sql.NullString `json:"google_id"`
	Name            sql.NullString `json:"name"`
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	IsActive        bool           `json:"is_active"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	LastLoginAt     sql.NullTime   `json:"last_login_at"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserByGoogleID(ctx context.Context, googleID sql.NullString) (GetUserByGoogleIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByGoogleID, googleID)
	var i GetUserByGoogleIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.Name,
		&i.ProfileImageUrl,
		&i.Bio,
		&i.IsActive,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT
  BIN_TO_UUID(id, TRUE) AS id,
  email,
  password_hash,
  google_id,
  name,
  profile_image_url,
  bio,
  is_active,
  email_verified_at,
  last_login_at,
  created_at,
  updated_at
FROM users
WHERE id = UUID_TO_BIN(?, TRUE)
`

type GetUserByIDRow struct {
	ID              string         `json:"id"`
	Email           string         `json:"email"`
	PasswordHash    sql.NullString `json:"password_hash"`
	GoogleID        sql.NullString `json:"google_id"`
	Name            sql.NullString `json:"name"`
	ProfileImageUrl sql.NullString `json:"profile_image_url"`
	Bio             sql.NullString `json:"bio"`
	IsActive        bool           `json:"is_active"`
	EmailVerifiedAt sql.NullTime   `json:"email_verified_at"`
	LastLoginAt     sql.NullTime   `json:"last_login_at"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.PasswordHash,
		&i.GoogleID,
		&i.Name,
		&i.ProfileImageUrl,
		&i.Bio,
		&i.IsActive,
		&i.EmailVerifiedAt,
		&i.LastLoginAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateUserGoogleID = `-- name: UpdateUserGoogleID :exec
UPDATE users
SET
  google_id = ?,
  updated_at = ?
WHERE id = UUID_TO_BIN(?, TRUE)
  AND google_id IS NULL
`

type UpdateUserGoogleIDParams struct {
	GoogleID  sql.NullString `json:"google_id"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        string         `json:"id"`
}

func (q *Queries) UpdateUserGoogleID(ctx context.Context, arg UpdateUserGoogleIDParams) error {
	_, err := q.db.ExecContext(ctx, updateUserGoogleID, arg.GoogleID, arg.UpdatedAt, arg.ID)
	return err
}

const updateUserLastLogin = `-- name: UpdateUserLastLogin :exec
UPDATE users
SET
  last_login_at = ?,
  updated_at = ?
WHERE id = UUID_TO_BIN(?, TRUE)
`

type UpdateUserLastLoginParams struct {
	LastLoginAt sql.NullTime `json:"last_login_at"`
	UpdatedAt   time.Time    `json:"updated_at"`
	ID          string       `json:"id"`
}

func (q *Queries) UpdateUserLastLogin(ctx context.Context, arg UpdateUserLastLoginParams) error {
	_, err := q.db.ExecContext(ctx, updateUserLastLogin, arg.LastLoginAt, arg.UpdatedAt, arg.ID)
	return err
}
